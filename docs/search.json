[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Publishing Your First Repo",
    "section": "",
    "text": "Our ambition in South East D&A is to share as much code as possible on GitHub, to maximise sharing with others as well as to help ourselves out in future. There are lots of things that this document does not cover but this is a very basic guide to publishing your first repo and hopefully we can make it less scary!"
  },
  {
    "objectID": "index.html#get-a-github-account",
    "href": "index.html#get-a-github-account",
    "title": "Publishing Your First Repo",
    "section": "Get a GitHub account",
    "text": "Get a GitHub account\nThis is super simple- go to GitHub (https://github.com/) and click Sign Up:\n\nThen you need to enable two factor authentication. Once logged in, go to Settings &gt; Password and authentication, and, in the section called Two-factor authentication, click Enable and follow the instructions. You can use the same app that you authenticate other access with."
  },
  {
    "objectID": "index.html#get-added-to-the-nhs-england-organisation-and-se-pat-area",
    "href": "index.html#get-added-to-the-nhs-england-organisation-and-se-pat-area",
    "title": "Publishing Your First Repo",
    "section": "Get added to the NHS England Organisation and SE PAT area",
    "text": "Get added to the NHS England Organisation and SE PAT area\nOnce you have a GitHub account and are set up with 2FA, you can email Sam A in our team, requesting to be added to the NHS England Organisation and the South East PAT area.\nThat’s it, we’re ready to share some code"
  },
  {
    "objectID": "index.html#sec-createrepo",
    "href": "index.html#sec-createrepo",
    "title": "Publishing Your First Repo",
    "section": "Create the repo",
    "text": "Create the repo\nWhen we first log in to GitHub, our homepage will look something like this. To create a repo, click the green New button in the left hand Top Repositories section.\n\nWe will also find this button in the Repositories sections on our profile and within any organisations that we are part of. They all lead to the same place. Which is here:\n\nUnpopulatedPopulated\n\n\n\n\n\n\n\n\n\nAs you can see, there are several things that need filling, and some that don’t. We take them from the top:\n\nRepository template- A couple of teams have set up templates for their repos to make life easier for them e.g. if they create a lot of repos with the same structures. If you haven’t created a template or don’t recognise any of them, you probably want to leave this as No template.\nOwner- Depending on where you were when you clicked the New Repository button, this will default to either your own account or one of your organisations. It’s up to you where you store your repos but, generally, you would want to put work that you intend to share with colleagues within the organisation and keep only personal things in your own area.\nRepository name- This should be a unique name that is short but reasonably descriptive. GitHub will handily tell you if the name is already in use somewhere else. Repo names shouldn’t include spaces but don’t worry if you forget, GitHub will replace spaces with hyphens.\nDescription- Although this field is optional, it’s a good idea to put something in here to help you (and others) quickly identify what the code is.\nPublic / Private- If you select Public then anyone anywhere can see your repo and the code within it. Selecting Private means that only those within the organisation (if the owner is an organisation) can see the code. Generally, this should be the default option- you can always change the privacy later.\nAdd a README file- Again, this is optional but generally a good idea. It will automatically create a markdown file with the repo name as the title and the description as the contents. You can then add details about the project including inputs, outputs, purpose, methodology etc. which will help you and others trying to use your code later.\nAdd .gitignore- A gitignore file tells GitHub which files to not look at and not publish. This could be things like data or personal user keys that you don’t want to share. We will use these more when we look at using GitHub Desktop but it is less important if you just plan to upload files manually.\nChoose a license- This just tells people what they can do with their code. You can leave this as None if you want or, if you’re happy for people to use and replicate your code as they please, you might choose the MIT License.\n\nNow you can click Create repository."
  },
  {
    "objectID": "index.html#move-the-repo-to-the-team-area",
    "href": "index.html#move-the-repo-to-the-team-area",
    "title": "Publishing Your First Repo",
    "section": "Move the repo to the team area",
    "text": "Move the repo to the team area\nIf you have created your repo in the organisational area, you might want to move it to live in the South East area. This is very simple.\n\nNavigate to the repo and click the Settings button\n\n\n\nWithin the Access section, click Collaborators and teams (top left), and click Add teams\n\n\n\nFinally search for and select South East D&A\n\n\n\nChoose what role you want your team members to have\n\n\nYour repo now lives in the South East D&A section of the organisation. This should make it easier to find and will allow your team colleagues to make changes if you’ve allowed them to!"
  },
  {
    "objectID": "index.html#add-files-to-the-repo",
    "href": "index.html#add-files-to-the-repo",
    "title": "Publishing Your First Repo",
    "section": "Add files to the repo",
    "text": "Add files to the repo\nFinally, all you need to do is actually upload some files!\n\nNavigate to your repo and click Add file and then Upload files\n\n\n\nDrag and drop or browse to your files\n\n\n\nName your commit, so you know what you added when, and click ✨Commit changes✨"
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Publishing Your First Repo",
    "section": "Setup",
    "text": "Setup\nFirst step is to download GitHub Desktop from the company portal. If you open the company portal, you can search for GitHub. You want to download the app with the purple cat.\n\nYou will then need to open it up and you should be prompted to pop in your github username (you may need to validate this in the browser version- I can’t remember).\nIf you ever need to change your associated github account, you can navigate File &gt; Options, and switch account in there."
  },
  {
    "objectID": "index.html#local-repo-management",
    "href": "index.html#local-repo-management",
    "title": "Publishing Your First Repo",
    "section": "Local repo management",
    "text": "Local repo management\n\nCreate a repo\nEven though it looks a little different, a lot of the process to create a repo in GitHub Desktop is similar to that of creating a repo in the browser, see Section 3.1 for a reminder. The main difference is that your repo will live locally until you choose to publish to GitHub, so no need to choose where it lives or privacy settings. You will, however need to choose which local file to put the repo folder- this will be where you save all your code.\n\n\n\n.gitignore\n\nWhat is it for?\nSetting up a gitignore file is a bit more important when working from GitHub desktop than when simply uploading files to the browser version. By default, all the files in the repo folder will be included in the repo. However, there are likely to be some files or information that you don’t want to share. For example, this could be data or sensitive connection strings. The gitignore file tells the repo which files not to look at.\n\n\nHow do we set one up?\nThis file can be set up when you create the repo by selecting a specific gitignore template. This will ignore a determined list of filetypes which are commonly associated with the option you select. For example, if you select the R gitignore template, the file will include all R History, R Data, R User Data, etc. It can be a good starting point if you don’t know where to start.\n\n\nHow can I add new files to the gitignore?\nFiles can be added to the gitignore manually by right clicking on a file in the Changes section of GitHub desktop, and clicking Ignore file. You can choose whether to add the individual file or all files of the same filetype (this might be useful if you want to blanket ignore e.g. .csv files)\n\n\nHow can I make manual changes?\nYou can change your gitignore file as you go along by opening it as a text file, making your changes, and saving them. You can then commit changes to your gitignore file in the same way as you commit changes to any other file in the repo so that they are tracked.\nAlternatively, you can update the gitignore by navigating to Repository &gt; Repository settings &gt; Ignored files and make changes there.\n\n\nWhat can go in the gitignore?\n\nIndividual files: you can ignore individual files by typing the filename\nWhole filetypes: if you want to ignore all of a particular filetype just prefix the filetype with an asterisk e.g. *.xlsx\nFolders and subfolders: if you don’t want a whole folder included, you can just name the folder path e.g. /data\n\n\n\n\nLocal changes\nUntil you click Publish repository, everything you create will live locally. This means that you can make changes to your files and code and play about endlessly until you’re happy to share more widely. It’s still a good idea to manage and commit changes.\nYou should now be able to create your projects and files within the repo folder (which lives wherever you decided when you set up the repo). You are then free to code / change files as you would normally within whichever programmes you use. All your saved changes will be tracked.\nAny changes you save in any files in this folder (that aren’t ignored) will appear in the GitHub desktop changes section. You can see which file has changed, what has been removed (red), and what has been added (green). If you like the changes, ensure that the tick box is checked on the left of the file name, name your commit and add a description (optional), and click Commit to main.\n\n\n\n\n\n\nTip\n\n\n\nA green square on the right of the file indicates a completely new file, orange indicates changes to an existing file, red indicates a deleted file.\n\n\n\nYou can make changes to multiple files in a single commit or commit them separately if you are likely to want to revisit multiple changes separately\n\n\nHistory\nIf you need to review or revisit any prior commits, you can see these in the History tab."
  },
  {
    "objectID": "index.html#push-to-github",
    "href": "index.html#push-to-github",
    "title": "Publishing Your First Repo",
    "section": "Push to GitHub",
    "text": "Push to GitHub\nAll that’s left to do is share your repo to github. This is as easy as clicking the Publish repository button.\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember to select the organisation if you want to share with colleagues. If you publish to your private area, you can transfer to the organisation but you will lose admin rights so won’t be able to make changes or move to the South East area!\n\n\nYou can also pull any changes from github down to your local machine by clicking Pull origin in the top bar"
  },
  {
    "objectID": "index.html#open-a-github-repo",
    "href": "index.html#open-a-github-repo",
    "title": "Publishing Your First Repo",
    "section": "Open a GitHub repo",
    "text": "Open a GitHub repo\nAs well as creating your own repos, it may be that you want to open someone else’s that you’ve seen on GitHub. There are 2 easy ways to do this:\n\nFrom the browser\nFrom the desktop app\n\n\nFrom the Browser\nThis is really easy. Navigate to the repo you want to work on. Click the green &lt;&gt; Code button, and then Open with GitHub Desktop. Easy.\n\n\n\nFrom GitHub Desktop\nThis is almost as easy. Within GitHub desktop, navigate to File &gt; Clone Repository and paste in either the URL of the repo in question, or type in the github username and repo name. The only other thing you need to do is tell GitHub desktop where you want the repo folder to live on your machine."
  },
  {
    "objectID": "second-page.html",
    "href": "second-page.html",
    "title": "Another Page",
    "section": "",
    "text": "Here is a second page test!"
  },
  {
    "objectID": "understanding-code.html",
    "href": "understanding-code.html",
    "title": "Making sense of code",
    "section": "",
    "text": "Knowing why you have the code in front of you will help you to define the detail in which you need to understand it.\n\nYou’ve been asked to QA it- you will probably need to understand the nuts and bolts of functionality, at least enough to try and break it test its robustness.\nYou need to run it in totality- in this case, you probably just need a high level view of what the code does and the key steps. You need to understand enough to debug errors and understand outputs but the nitty gritty is less important.\nYou want to use elements for yourself- you can focus just on the functionality you want, no need to understand everything, just how to find the key bits and why they do what they do.\nYou will need to maintain and adapt the code yourself- in this case, you will probably need an in-depth understanding of the code and its processes."
  },
  {
    "objectID": "understanding-code.html#know-your-angle",
    "href": "understanding-code.html#know-your-angle",
    "title": "Making sense of code",
    "section": "",
    "text": "Knowing why you have the code in front of you will help you to define the detail in which you need to understand it.\n\nYou’ve been asked to QA it- you will probably need to understand the nuts and bolts of functionality, at least enough to try and break it test its robustness.\nYou need to run it in totality- in this case, you probably just need a high level view of what the code does and the key steps. You need to understand enough to debug errors and understand outputs but the nitty gritty is less important.\nYou want to use elements for yourself- you can focus just on the functionality you want, no need to understand everything, just how to find the key bits and why they do what they do.\nYou will need to maintain and adapt the code yourself- in this case, you will probably need an in-depth understanding of the code and its processes."
  },
  {
    "objectID": "understanding-code.html#know-what-the-code-does",
    "href": "understanding-code.html#know-what-the-code-does",
    "title": "Making sense of code",
    "section": "Know what the code does",
    "text": "Know what the code does\nGet an idea of what the piece of code / project was designed to do. Maybe it’s well-documented or its author has already told you what the purpose is, or maybe it’s a complete mystery. Either way, pick a simple example to work through or just run it all and see what it does."
  },
  {
    "objectID": "understanding-code.html#understand-the-geography",
    "href": "understanding-code.html#understand-the-geography",
    "title": "Making sense of code",
    "section": "Understand the geography",
    "text": "Understand the geography\nMost code will be split into sections, e.g. libraries, functions, data import, wrangling / manipulation, visualisation, output. Just knowing how the script is organised can help hugely with unpicking sections. Try and figure out broadly what each part of the code is doing and how the pieces fit together. Maybe it’s helpful to sketch out the different sections and what they do?"
  },
  {
    "objectID": "understanding-code.html#familiarise-yourself-with-the-data",
    "href": "understanding-code.html#familiarise-yourself-with-the-data",
    "title": "Making sense of code",
    "section": "Familiarise yourself with the data",
    "text": "Familiarise yourself with the data\nHave a look at the data that the script uses. Familiarise yourself with the format, column headers, metric values. This will help you to understand what specific bits of code and focusing on and, if you want to reuse any code, this can also help you to understand what format you need your data to be in."
  },
  {
    "objectID": "understanding-code.html#pick-apart-small-sections",
    "href": "understanding-code.html#pick-apart-small-sections",
    "title": "Making sense of code",
    "section": "Pick apart small sections",
    "text": "Pick apart small sections\nIt’s often difficult to read code from start to finish- partly because the optimal organisation for code is not often the way that code is initially written. Try and focus on trying to understand one bit in detail at a time.\n\nThink of something that you know that the code does and find that bit.\nMake notes- maybe run the code line by line and make a comment detailing what that bit did.\nDon’t get sidetracked- try and focus on one bit at a time.\nStart from the beginning of a process, or the middle, or the end! Sometimes it’s easiest to start from the beginning and understand each step in-turn, other times the steps taken can feel illogical without knowing the end point. In these cases, you might want to start from the output and understand the previous steps. Other times you might do a bit of both and meet in the middle- do whatever helps you!"
  },
  {
    "objectID": "understanding-code.html#trust-the-code",
    "href": "understanding-code.html#trust-the-code",
    "title": "Making sense of code",
    "section": "Trust the code",
    "text": "Trust the code\nIf there’s a section of the code that you don’t understand but it isn’t part of the process that you need to understand at the moment, it’s ok to treat it as a magical black box. You can always come back to it later but, for now, it’s just a part of the code that serves a purpose. Examples of chunky bits you might be able to ignore are anything that ‘makes things pretty’. Unless you’re specifically interested in the nuts and bolts of e.g. visualisations, that’s often quite a bit of scary looking that you can happily ignore without compromising your understanding of code processes."
  },
  {
    "objectID": "understanding-code.html#the-internet-is-your-friend",
    "href": "understanding-code.html#the-internet-is-your-friend",
    "title": "Making sense of code",
    "section": "The internet is your friend",
    "text": "The internet is your friend\nError messages are not always the most helpful. Fortunately, you won’t be the first person to have encountered an error. Copy the error message, minus any bits that are specific to your instance e.g. local paths, file names, etc., and ask the internet for help. If you encounter multiple error messages, start with the first (earliest) one- often it’s a single problem causing the subsequent errors."
  },
  {
    "objectID": "understanding-code.html#tips",
    "href": "understanding-code.html#tips",
    "title": "Making sense of code",
    "section": "Tips",
    "text": "Tips\nNote: these are R specific tips to help with organising your own, and others’, code.\n\nIndentation:\nHighlighting code and hitting ctrl + i will indent all code. This makes it easier to read and spot the starts and ends of complex functions and loops.\n\n\nRainbow parenthesis:\nThis is a really handy way to patch opening to closing parenthesis. You can spend more time understanding what things are doing rather than counting and matching opening and closing brackets.\nTools &gt; Global Options &gt; Code &gt; Display &gt; Rainbow parenthesis\n\n\nSearching functions:\nIf you don’t know what a function does or what its inputs / outputs are, you can search in the console e.g. don’t know what mutate does, type ?mutate and hit enter and you will see a short description of what mutate does and an explanation of the variables it takes as inputs.\n\n\nSections:\nCreate a section by ctrl + shift + r and giving it a name. Sections created like this can be collapsed and navigated to using the menu between the script and the console. This can help you navigate your code and focus only on the section you need."
  },
  {
    "objectID": "index.html#get-added-to-the-nhs-england-organisation-and-se-da-area",
    "href": "index.html#get-added-to-the-nhs-england-organisation-and-se-da-area",
    "title": "Publishing Your First Repo",
    "section": "Get added to the NHS England Organisation and SE D&A area",
    "text": "Get added to the NHS England Organisation and SE D&A area\nOnce you have a GitHub account and are set up with 2FA, you can email the organisational GitHub Management inbox at github@england.nhs.uk, requesting to be added to the NHS England Organisation and then one of our local admins can add you to the South East D&A area.\n\n\n\n\n\n\nTip\n\n\n\nImportant note: the permissions set up means that creating a repo in your personal area and moving it to the organisation area will result in you losing all admin permissions (e.g. to add users / move to the team area). So make sure you are putting repos in the right place!!\n\n\nThat’s it, we’re ready to share some code!"
  },
  {
    "objectID": "version-control.html",
    "href": "version-control.html",
    "title": "Version Control",
    "section": "",
    "text": "Blurb about why to use version control."
  },
  {
    "objectID": "version-control.html#part-1-create-a-new-rstudio-project-with-git",
    "href": "version-control.html#part-1-create-a-new-rstudio-project-with-git",
    "title": "Version Control",
    "section": "Part 1: Create a new RStudio project with Git",
    "text": "Part 1: Create a new RStudio project with Git\nThere are three ways to create version control for a RStudio project.\na) Create a new project and create a local Git repository: Select File &gt; New Project.., create a project from a New Directory and check the option Create a git repository. In order to push to a remote repository later on you add that remote repository by using the Git shell. If you already know which online repository you want to use for your projects, option c) is more convenient.\nb) Create a new project from a folder under version control: In this case you only need to create a new RStudio project for that directory and version control is automatically enabled. Go to File &gt; New Project, select create a new project from an Existing Directory and create the project.\nc) Create a new project based on a remote Git repository: Select File &gt; New Project.. and from the opening menu select to create a new project from Version Control, Choose Git, then provide the repository url (use the https link of the url if you want to avoid all the ssh trouble) from the the repository you want to clone and create the project.\nIn this tutorial we create a project based on a remote GitHub repository (option c). Hence we first create a new repository on GitHub and create our GitHub project from that repository.\n1. Create a new GitHub repository: Login to your GitHub account and create a new GitHub repository. Give your new repository a short and memorable name e.g. rstudio-git-test, check the option to initialize this repository with a README and create the repository.\n2. Copy the repository HTTPS url: To create a new Git based project in RStudio, we need the repository url. You find the repository HTTPS url on the just created GitHub project page. There press the button &lt;&gt; Code (green button) and copy the HTTPS link of the project by clicking the little icon to the right of the URL. The link will be something like https://github.com/yourusername/rstudio-git-test.git.\n3. Create a new RStudio project with Git version control: Now everything is ready to create a new project with Git version control in RStudio. In RStudio Select File &gt; New Project.., select Version Control, Choose Git, then provide the repository HTTPS link, select the R workspace folder and create the project. RStudio now copies (clone in Git terms) the content of the repository to your project folder. The content of the GitHub repository should now appear in the Files pane of RStudio and you should see there the created README.md."
  },
  {
    "objectID": "version-control.html#part-2-make-local-changes-commit-and-push-to-github",
    "href": "version-control.html#part-2-make-local-changes-commit-and-push-to-github",
    "title": "Version Control",
    "section": "Part 2: Make local changes, commit and push to GitHub",
    "text": "Part 2: Make local changes, commit and push to GitHub\n1. Make local changes: Open the README.md file and edit and save the file.\n# RR project in RStudio\n\nRR workshop RStudio + Git repository\n\nMy first commit to GitHub with R \n2. Commit the changes: Now we commit the local changes to the local Git repository.\nIn RStudio press the Git icon and select Commit from Git menu (Ctrl+Alt+M) to open the commit window to review the changes in the repository. In the Staged column we select by checking the checkbox the files we want to commit. The lower pane shows the edits in green and red of the file. Enter a commit message to indicate what has changed in this commit e.g.Readme update and press the Commit button.\n\n\n3. Push to the remote repository: To push the changes to the remote GitHub repository press the Push button on the upper right corner of the commit window. You will be prompted to enter the username and password of your GitHub account. Enter them and check on the GitHub page if the changes got pushed to your online repository on GitHub."
  },
  {
    "objectID": "4-databricks-github.html",
    "href": "4-databricks-github.html",
    "title": "GitHub in Databricks",
    "section": "",
    "text": "Many of the principles of working in a reproducible way and using GitHub also apply when we use GitHub in UDAL and Databricks. We will go through the practicalities of connecting to and using your GitHub account in Databricks.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#in-github",
    "href": "4-databricks-github.html#in-github",
    "title": "GitHub in Databricks",
    "section": "In GitHub",
    "text": "In GitHub\nGo to your GitHub account…\n\nClick on your profile photo and go to settings.\n\n\n\nScroll down to Developer Settings. For me this was the bottom option in the left pane so keep scrolling!\n\n\n\nClick the Personal Access Tokens tab on the left and then Tokens (Classic).\n\n\n\nClick Generate New Token, choose the (Classic) option if offered that choice.\n\n\n\nEnter a name for your token. Help yourself out here and give it a sensible name… Give the token all the repo scope and, if you use GitHub actions, also select the workflow scope.\n\n\n\n\n\n\n\nTip\n\n\n\nNote: although you can set your token to have no expiry date, for security purposes, it is recommended that you give your token an expiry date.\n\n\n\n\nClick Generate Token.\n\n\nAn access token should appear (and you will also get an email to notify you that it has been created).\n\n\n\n\n\n\nImportant\n\n\n\nNote: Once you navigate away from this page, the token will disappear and never come back again, so make sure you copy it to the clipboard.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#connecting-with-your-token",
    "href": "4-databricks-github.html#connecting-with-your-token",
    "title": "GitHub in Databricks",
    "section": "Connecting with your token",
    "text": "Connecting with your token\n\nClick on your profile in the top right and then Settings.\n\n\n\nThen click Linked Accounts.\n\n\n\nPopulate the form with GitHub as the Git Provider and your own user name. This is where you can paste your Personal Access Token.\n\n\n\n\n\n\n\n\nTip\n\n\n\nRemember: you can’t copy and paste from outside UDAL…",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#creating-a-repo-reminder",
    "href": "4-databricks-github.html#creating-a-repo-reminder",
    "title": "GitHub in Databricks",
    "section": "Creating a repo reminder",
    "text": "Creating a repo reminder\n\nIf you do not already have a repo you want to clone, you can create one on GitHub. Feel free to use the SE github template which will initialise a repo with a gitignore, SOP folder and template, and README template with some key reporting info for you to easily edit.\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember to create your repo in the nhsengland area, not your personal GitHub, otherwise when you transfer it you will lose your admin privileges! You should also add the South East D&A Team and the everyone team to the permissions.\n\n\n\nNow that you have a repo to clone…",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#cloning-a-repo",
    "href": "4-databricks-github.html#cloning-a-repo",
    "title": "GitHub in Databricks",
    "section": "Cloning a repo",
    "text": "Cloning a repo\n\nIn your Home (personal) area of Databricks, click Create and then Git Folder.\n\n\nor go via the big New button in the top left.\n\n\nCopy the repo URL into this box and give your folder a name.\n\n\nYou can get the repo URL from GitHub. Navigate to the repo and click the big &lt;&gt;Code button.\n\nWhen you’ve done, it should look something like this:\n\nYou are now ✨Connected✨",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#the-git-window",
    "href": "4-databricks-github.html#the-git-window",
    "title": "GitHub in Databricks",
    "section": "The Git Window",
    "text": "The Git Window\nClick on the branch name to open the Git window.\n\nFrom here you can manage branches, commits, and everything else that you might want to do. You can also open the repo in GitHub from this pane.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#the-gitignore",
    "href": "4-databricks-github.html#the-gitignore",
    "title": "GitHub in Databricks",
    "section": "The gitignore",
    "text": "The gitignore\nAny files that you want to ignore can be added to the gitignore using the relative file path.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "N-another-page.html",
    "href": "N-another-page.html",
    "title": "Another Page",
    "section": "",
    "text": "Here is another page test!",
    "crumbs": [
      "Placeholder",
      "Another Page"
    ]
  },
  {
    "objectID": "2-understanding-code.html",
    "href": "2-understanding-code.html",
    "title": "Making sense of code",
    "section": "",
    "text": "Knowing why you have the code in front of you will help you to define the detail in which you need to understand it. Here are some possible options.\n\nYou’ve been asked to QA it- you will probably need to understand the nuts and bolts of functionality, at least enough to try and break it test its robustness.\nYou need to run it in totality- in this case, you probably just need a high level view of what the code does and the key steps. You need to understand enough to debug errors and understand outputs but the nitty gritty is less important.\nYou want to use elements for yourself- you can focus just on the functionality you want, no need to understand everything, just how to find the key bits and why they do what they do.\nYou will need to maintain and adapt the code yourself- in this case, you will probably need an in-depth understanding of the code and its processes.",
    "crumbs": [
      "Principles",
      "Making sense of code"
    ]
  },
  {
    "objectID": "2-understanding-code.html#know-your-angle",
    "href": "2-understanding-code.html#know-your-angle",
    "title": "Making sense of code",
    "section": "",
    "text": "Knowing why you have the code in front of you will help you to define the detail in which you need to understand it. Here are some possible options.\n\nYou’ve been asked to QA it- you will probably need to understand the nuts and bolts of functionality, at least enough to try and break it test its robustness.\nYou need to run it in totality- in this case, you probably just need a high level view of what the code does and the key steps. You need to understand enough to debug errors and understand outputs but the nitty gritty is less important.\nYou want to use elements for yourself- you can focus just on the functionality you want, no need to understand everything, just how to find the key bits and why they do what they do.\nYou will need to maintain and adapt the code yourself- in this case, you will probably need an in-depth understanding of the code and its processes.",
    "crumbs": [
      "Principles",
      "Making sense of code"
    ]
  },
  {
    "objectID": "2-understanding-code.html#know-what-the-code-does",
    "href": "2-understanding-code.html#know-what-the-code-does",
    "title": "Making sense of code",
    "section": "Know what the code does",
    "text": "Know what the code does\nGet an idea of what the piece of code / project was designed to do. Maybe it’s well-documented or its author has already told you what the purpose is, or maybe it’s a complete mystery. Either way, pick a simple example to work through or just run it all and see what it does.",
    "crumbs": [
      "Principles",
      "Making sense of code"
    ]
  },
  {
    "objectID": "2-understanding-code.html#understand-the-geography",
    "href": "2-understanding-code.html#understand-the-geography",
    "title": "Making sense of code",
    "section": "Understand the geography",
    "text": "Understand the geography\nMost code will be split into sections, e.g. libraries, functions, data import, wrangling / manipulation, visualisation, output. Just knowing how the script is organised can help hugely with unpicking sections. Try and figure out broadly what each part of the code is doing and how the pieces fit together. Maybe it’s helpful to sketch out the different sections and what they do?",
    "crumbs": [
      "Principles",
      "Making sense of code"
    ]
  },
  {
    "objectID": "2-understanding-code.html#familiarise-yourself-with-the-data",
    "href": "2-understanding-code.html#familiarise-yourself-with-the-data",
    "title": "Making sense of code",
    "section": "Familiarise yourself with the data",
    "text": "Familiarise yourself with the data\nHave a look at the data that the script uses. Familiarise yourself with the format, column headers, metric values. This will help you to understand what specific bits of code and focusing on and, if you want to reuse any code, this can also help you to understand what format you need your data to be in.",
    "crumbs": [
      "Principles",
      "Making sense of code"
    ]
  },
  {
    "objectID": "2-understanding-code.html#pick-apart-small-sections",
    "href": "2-understanding-code.html#pick-apart-small-sections",
    "title": "Making sense of code",
    "section": "Pick apart small sections",
    "text": "Pick apart small sections\nIt’s often difficult to read code from start to finish- partly because the optimal organisation for code is not often the way that code is initially written. Try and focus on trying to understand one bit in detail at a time.\n\nThink of something that you know that the code does and find that bit.\nMake notes- maybe run the code line by line and make a comment detailing what that bit did.\nDon’t get sidetracked- try and focus on one bit at a time.\nStart from the beginning of a process, or the middle, or the end! Sometimes it’s easiest to start from the beginning and understand each step in-turn, other times the steps taken can feel illogical without knowing the end point. In these cases, you might want to start from the output and understand the previous steps. Other times you might do a bit of both and meet in the middle- do whatever helps you!",
    "crumbs": [
      "Principles",
      "Making sense of code"
    ]
  },
  {
    "objectID": "2-understanding-code.html#trust-the-code",
    "href": "2-understanding-code.html#trust-the-code",
    "title": "Making sense of code",
    "section": "Trust the code",
    "text": "Trust the code\nIf there’s a section of the code that you don’t understand but it isn’t part of the process that you need to understand at the moment, it’s ok to treat it as a magical black box. You can always come back to it later but, for now, it’s just a part of the code that serves a purpose. Examples of chunky bits you might be able to ignore are anything that ‘makes things pretty’. Unless you’re specifically interested in the nuts and bolts of e.g. visualisations, that’s often quite a bit of scary looking that you can happily ignore without compromising your understanding of code processes.",
    "crumbs": [
      "Principles",
      "Making sense of code"
    ]
  },
  {
    "objectID": "2-understanding-code.html#the-internet-is-your-friend",
    "href": "2-understanding-code.html#the-internet-is-your-friend",
    "title": "Making sense of code",
    "section": "The internet is your friend",
    "text": "The internet is your friend\nError messages are not always the most helpful. Fortunately, you won’t be the first person to have encountered an error. Copy the error message, minus any bits that are specific to your instance e.g. local paths, file names, etc., and ask the internet for help. If you encounter multiple error messages, start with the first (earliest) one- often it’s a single problem causing the subsequent errors.",
    "crumbs": [
      "Principles",
      "Making sense of code"
    ]
  },
  {
    "objectID": "2-understanding-code.html#tips",
    "href": "2-understanding-code.html#tips",
    "title": "Making sense of code",
    "section": "Tips",
    "text": "Tips\nNote: these are R specific tips to help with organising your own, and others’, code.\n\nIndentation:\nHighlighting code and hitting ctrl + i will indent all code. This makes it easier to read and spot the starts and ends of complex functions and loops.\n\n\nRainbow parenthesis:\nThis is a really handy way to patch opening to closing parenthesis. You can spend more time understanding what things are doing rather than counting and matching opening and closing brackets.\nTools &gt; Global Options &gt; Code &gt; Display &gt; Rainbow parenthesis\n\n\nSearching functions:\nIf you don’t know what a function does or what its inputs / outputs are, you can search in the console e.g. don’t know what mutate does, type ?mutate and hit enter and you will see a short description of what mutate does and an explanation of the variables it takes as inputs.\n\n\nSections:\nCreate a section by ctrl + shift + r and giving it a name. Sections created like this can be collapsed and navigated to using the menu between the script and the console. This can help you navigate your code and focus only on the section you need.",
    "crumbs": [
      "Principles",
      "Making sense of code"
    ]
  },
  {
    "objectID": "1-first-repo.html",
    "href": "1-first-repo.html",
    "title": "Publishing Your First Repo",
    "section": "",
    "text": "Our ambition in South East D&A is to share as much code as possible on GitHub, to maximise sharing with others as well as to help ourselves out in future. There are lots of things that this document does not cover but this is a very basic guide to publishing your first repo and hopefully we can make it less scary!",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "1-first-repo.html#get-a-github-account",
    "href": "1-first-repo.html#get-a-github-account",
    "title": "Publishing Your First Repo",
    "section": "Get a GitHub account",
    "text": "Get a GitHub account\nThis is super simple- go to GitHub (https://github.com/) and click Sign Up:\n\nThen you need to enable two factor authentication. Once logged in, go to Settings &gt; Password and authentication, and, in the section called Two-factor authentication, click Enable and follow the instructions. You can use the same app that you authenticate other access with.",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "1-first-repo.html#get-added-to-the-nhs-england-organisation-and-se-da-area",
    "href": "1-first-repo.html#get-added-to-the-nhs-england-organisation-and-se-da-area",
    "title": "Publishing Your First Repo",
    "section": "Get added to the NHS England Organisation and SE D&A area",
    "text": "Get added to the NHS England Organisation and SE D&A area\nOnce you have a GitHub account and are set up with 2FA, you can email the organisational GitHub Management inbox at github@england.nhs.uk, requesting to be added to the NHS England Organisation and then one of our local admins can add you to the South East D&A area.\n\n\n\n\n\n\nNote\n\n\n\nImportant note: the permissions set up means that creating a repo in your personal area and moving it to the organisation area will result in you losing all admin permissions (e.g. to add users / move to the team area). So make sure you are putting repos in the right place!!\n\n\nThat’s it, we’re ready to share some code!",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "1-first-repo.html#sec-createrepo",
    "href": "1-first-repo.html#sec-createrepo",
    "title": "Publishing Your First Repo",
    "section": "Create the repo",
    "text": "Create the repo\nWhen we first log in to GitHub, our homepage will look something like this. To create a repo, click the green New button in the left hand Top Repositories section.\n\nWe will also find this button in the Repositories sections on our profile and within any organisations that we are part of. They all lead to the same place. Which is here:\n\nUnpopulatedPopulated\n\n\n\n\n\n\n\n\n\nAs you can see, there are several things that need filling, and some that don’t. We take them from the top:\n\nRepository template- There is a se-template team template you can choose to use. It will initialise a repo with a gitignore, SOP folder and template, and README template with some key reporting info for you to easily edit. If you don’t want to use this template, feel free to leave this as No template.\nOwner- Depending on where you were when you clicked the New Repository button, this will default to either your own account or one of your organisations. It’s up to you where you store your repos but, generally, you would want to put work that you intend to share with colleagues within the organisation and keep only personal things in your own area.\nRepository name- This should be a unique name that is short but reasonably descriptive. GitHub will handily tell you if the name is already in use somewhere else. Repo names shouldn’t include spaces but don’t worry if you forget, GitHub will replace spaces with hyphens.\nDescription- Although this field is optional, it’s a good idea to put something in here to help you (and others) quickly identify what the code is.\nPublic / Private- If you select Public then anyone anywhere can see your repo and the code within it. Selecting Private means that only those within the organisation (if the owner is an organisation) can see the code. Generally, this should be the default option- you can always change the privacy later.\nAdd a README file- Again, this is optional but generally a good idea. It will automatically create a markdown file with the repo name as the title and the description as the contents. You can then add details about the project including inputs, outputs, purpose, methodology etc. which will help you and others trying to use your code later.\nAdd .gitignore- A gitignore file tells GitHub which files to not look at and not publish. This could be things like data or personal user keys that you don’t want to share. We will use these more when we look at using GitHub Desktop but it is less important if you just plan to upload files manually.\nChoose a license- This just tells people what they can do with their code. You can leave this as None if you want or, if you’re happy for people to use and replicate your code as they please, you might choose the MIT License.\n\nNow you can click Create repository.",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "1-first-repo.html#move-the-repo-to-the-team-area",
    "href": "1-first-repo.html#move-the-repo-to-the-team-area",
    "title": "Publishing Your First Repo",
    "section": "Move the repo to the team area",
    "text": "Move the repo to the team area\nIf you have created your repo in the organisational area, you might want to move it to live in the South East area. This is very simple.\n\nNavigate to the repo and click the Settings button\n\n\n\nWithin the Access section, click Collaborators and teams (top left), and click Add teams\n\n\n\nFinally search for and select South East D&A\n\n\n\nChoose what role you want your team members to have\n\n\nYour repo now lives in the South East D&A section of the organisation. This should make it easier to find and will allow your team colleagues to make changes if you’ve allowed them to! ::: callout-tip Please also add the nhsengland everyone team to the repo so that everyone in the organisation can see your code. :::",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "1-first-repo.html#add-files-to-the-repo",
    "href": "1-first-repo.html#add-files-to-the-repo",
    "title": "Publishing Your First Repo",
    "section": "Add files to the repo",
    "text": "Add files to the repo\nFinally, all you need to do is actually upload some files!\n\nNavigate to your repo and click Add file and then Upload files\n\n\n\nDrag and drop or browse to your files\n\n\n\nName your commit, so you know what you added when, and click ✨Commit changes✨",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "1-first-repo.html#setup",
    "href": "1-first-repo.html#setup",
    "title": "Publishing Your First Repo",
    "section": "Setup",
    "text": "Setup\nFirst step is to download GitHub Desktop from the company portal. If you open the company portal, you can search for GitHub. You want to download the app with the purple cat.\n\nYou will then need to open it up and you should be prompted to pop in your github username (you may need to validate this in the browser version- I can’t remember).\nIf you ever need to change your associated github account, you can navigate File &gt; Options, and switch account in there.",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "1-first-repo.html#local-repo-management",
    "href": "1-first-repo.html#local-repo-management",
    "title": "Publishing Your First Repo",
    "section": "Local repo management",
    "text": "Local repo management\n\nCreate a repo\nEven though it looks a little different, a lot of the process to create a repo in GitHub Desktop is similar to that of creating a repo in the browser, see Section 3.1 for a reminder. The main difference is that your repo will live locally until you choose to publish to GitHub, so no need to choose where it lives or privacy settings. You will, however need to choose which local file to put the repo folder- this will be where you save all your code.\n\n\n\n.gitignore\n\nWhat is it for?\nSetting up a gitignore file is a bit more important when working from GitHub desktop than when simply uploading files to the browser version. By default, all the files in the repo folder will be included in the repo. However, there are likely to be some files or information that you don’t want to share. For example, this could be data or sensitive connection strings. The gitignore file tells the repo which files not to look at.\n\n\nHow do we set one up?\nThis file can be set up when you create the repo by selecting a specific gitignore template. This will ignore a determined list of filetypes which are commonly associated with the option you select. For example, if you select the R gitignore template, the file will include all R History, R Data, R User Data, etc. It can be a good starting point if you don’t know where to start.\n\n\nHow can I add new files to the gitignore?\nFiles can be added to the gitignore manually by right clicking on a file in the Changes section of GitHub desktop, and clicking Ignore file. You can choose whether to add the individual file or all files of the same filetype (this might be useful if you want to blanket ignore e.g. .csv files)\n\n\nHow can I make manual changes?\nYou can change your gitignore file as you go along by opening it as a text file, making your changes, and saving them. You can then commit changes to your gitignore file in the same way as you commit changes to any other file in the repo so that they are tracked.\nAlternatively, you can update the gitignore by navigating to Repository &gt; Repository settings &gt; Ignored files and make changes there.\n\n\nWhat can go in the gitignore?\n\nIndividual files: you can ignore individual files by typing the filename\nWhole filetypes: if you want to ignore all of a particular filetype just prefix the filetype with an asterisk e.g. *.xlsx\nFolders and subfolders: if you don’t want a whole folder included, you can just name the folder path e.g. /data\n\n\n\n\nLocal changes\nUntil you click Publish repository, everything you create will live locally. This means that you can make changes to your files and code and play about endlessly until you’re happy to share more widely. It’s still a good idea to manage and commit changes.\nYou should now be able to create your projects and files within the repo folder (which lives wherever you decided when you set up the repo). You are then free to code / change files as you would normally within whichever programmes you use. All your saved changes will be tracked.\nAny changes you save in any files in this folder (that aren’t ignored) will appear in the GitHub desktop changes section. You can see which file has changed, what has been removed (red), and what has been added (green). If you like the changes, ensure that the tick box is checked on the left of the file name, name your commit and add a description (optional), and click Commit to main.\n\n\n\n\n\n\nTip\n\n\n\nA green square on the right of the file indicates a completely new file, orange indicates changes to an existing file, red indicates a deleted file.\n\n\n\nYou can make changes to multiple files in a single commit or commit them separately if you are likely to want to revisit multiple changes separately\n\n\nHistory\nIf you need to review or revisit any prior commits, you can see these in the History tab.",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "1-first-repo.html#push-to-github",
    "href": "1-first-repo.html#push-to-github",
    "title": "Publishing Your First Repo",
    "section": "Push to GitHub",
    "text": "Push to GitHub\nAll that’s left to do is share your repo to github. This is as easy as clicking the Publish repository button.\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember to select the organisation if you want to share with colleagues. If you publish to your private area, you can transfer to the organisation but you will lose admin rights so won’t be able to make changes or move to the South East area!\n\n\nYou can also pull any changes from github down to your local machine by clicking Pull origin in the top bar",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "1-first-repo.html#open-a-github-repo",
    "href": "1-first-repo.html#open-a-github-repo",
    "title": "Publishing Your First Repo",
    "section": "Open a GitHub repo",
    "text": "Open a GitHub repo\nAs well as creating your own repos, it may be that you want to open someone else’s that you’ve seen on GitHub. There are 2 easy ways to do this:\n\nFrom the browser\nFrom the desktop app\n\n\nFrom the Browser\nThis is really easy. Navigate to the repo you want to work on. Click the green &lt;&gt; Code button, and then Open with GitHub Desktop. Easy.\n\n\n\nFrom GitHub Desktop\nThis is almost as easy. Within GitHub desktop, navigate to File &gt; Clone Repository and paste in either the URL of the repo in question, or type in the github username and repo name. The only other thing you need to do is tell GitHub desktop where you want the repo folder to live on your machine.",
    "crumbs": [
      "GitHub Guides",
      "Publishing Your First Repo"
    ]
  },
  {
    "objectID": "3-version-control.html",
    "href": "3-version-control.html",
    "title": "Version Control",
    "section": "",
    "text": "Blurb about why to use version control."
  },
  {
    "objectID": "3-version-control.html#part-1-create-a-new-rstudio-project-with-git",
    "href": "3-version-control.html#part-1-create-a-new-rstudio-project-with-git",
    "title": "Version Control",
    "section": "Part 1: Create a new RStudio project with Git",
    "text": "Part 1: Create a new RStudio project with Git\nThere are three ways to create version control for a RStudio project.\na) Create a new project and create a local Git repository: Select File &gt; New Project.., create a project from a New Directory and check the option Create a git repository. In order to push to a remote repository later on you add that remote repository by using the Git shell. If you already know which online repository you want to use for your projects, option c) is more convenient.\nb) Create a new project from a folder under version control: In this case you only need to create a new RStudio project for that directory and version control is automatically enabled. Go to File &gt; New Project, select create a new project from an Existing Directory and create the project.\nc) Create a new project based on a remote Git repository: Select File &gt; New Project.. and from the opening menu select to create a new project from Version Control, Choose Git, then provide the repository url (use the https link of the url if you want to avoid all the ssh trouble) from the the repository you want to clone and create the project.\nIn this tutorial we create a project based on a remote GitHub repository (option c). Hence we first create a new repository on GitHub and create our GitHub project from that repository.\n1. Create a new GitHub repository: Login to your GitHub account and create a new GitHub repository. Give your new repository a short and memorable name e.g. rstudio-git-test, check the option to initialize this repository with a README and create the repository.\n2. Copy the repository HTTPS url: To create a new Git based project in RStudio, we need the repository url. You find the repository HTTPS url on the just created GitHub project page. There press the button &lt;&gt; Code (green button) and copy the HTTPS link of the project by clicking the little icon to the right of the URL. The link will be something like https://github.com/yourusername/rstudio-git-test.git.\n3. Create a new RStudio project with Git version control: Now everything is ready to create a new project with Git version control in RStudio. In RStudio Select File &gt; New Project.., select Version Control, Choose Git, then provide the repository HTTPS link, select the R workspace folder and create the project. RStudio now copies (clone in Git terms) the content of the repository to your project folder. The content of the GitHub repository should now appear in the Files pane of RStudio and you should see there the created README.md."
  },
  {
    "objectID": "3-version-control.html#part-2-make-local-changes-commit-and-push-to-github",
    "href": "3-version-control.html#part-2-make-local-changes-commit-and-push-to-github",
    "title": "Version Control",
    "section": "Part 2: Make local changes, commit and push to GitHub",
    "text": "Part 2: Make local changes, commit and push to GitHub\n1. Make local changes: Open the README.md file and edit and save the file.\n# RR project in RStudio\n\nRR workshop RStudio + Git repository\n\nMy first commit to GitHub with R \n2. Commit the changes: Now we commit the local changes to the local Git repository.\nIn RStudio press the Git icon and select Commit from Git menu (Ctrl+Alt+M) to open the commit window to review the changes in the repository. In the Staged column we select by checking the checkbox the files we want to commit. The lower pane shows the edits in green and red of the file. Enter a commit message to indicate what has changed in this commit e.g.Readme update and press the Commit button.\n\n3. Push to the remote repository: To push the changes to the remote GitHub repository press the Push button on the upper right corner of the commit window. You will be prompted to enter the username and password of your GitHub account. Enter them and check on the GitHub page if the changes got pushed to your online repository on GitHub."
  },
  {
    "objectID": "4-databricks-github.html#create-a-branch",
    "href": "4-databricks-github.html#create-a-branch",
    "title": "GitHub in Databricks",
    "section": "Create a branch",
    "text": "Create a branch\nCreating a branch is as simple as selecting Create Branch in the Git window and giving it a name. You can now work from this new branch.\n\nYou can see which branch you are working from in the repository.\n\n\n\n\n\n\n\nTip\n\n\n\nRemember to only make changes outside of the main branch. Only fully complete and QA’d code should be on the main branch.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#push-changes",
    "href": "4-databricks-github.html#push-changes",
    "title": "GitHub in Databricks",
    "section": "Push changes",
    "text": "Push changes\nOnce you’ve made any changes, open up the Git window. Any files which have been changed will appear on the left with the changes on the right. Select which changes to commit and add any commit messages before hitting Commit & Push. Notice that the Databricks integration pushes commits automatically.\n\n\n\n\n\n\n\nTip\n\n\n\nRemember that you can roll back commits, so feel free to stage your commits (make multiple smaller commits) to make it easier to roll back only what you need to.\n\n\nPull requests can be handled and old branches deleted in the normal way on GitHub.\n\n\n\n\n\n\nTip\n\n\n\nYou can assign your QA’er to the pull request to perform the QA and make the final merge.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#pull-changes-to-the-repository",
    "href": "4-databricks-github.html#pull-changes-to-the-repository",
    "title": "GitHub in Databricks",
    "section": "Pull changes to the repository",
    "text": "Pull changes to the repository\nMake sure you get the latest version of the repo before you begin using it. Within the Git window, click Pull in the top right corner. Confirm that you’re happy to pull changes.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "3b-vs-code.html",
    "href": "3b-vs-code.html",
    "title": "GitHub in VS Code",
    "section": "",
    "text": "Setting up Git in VSCode\nBefore we get started using Git in VSCode, for the first time only, it needs to be configured. Yes, it uses the Terminal window, but it’s not scary!\nThis can be done either by: - Open ‘Terminal’ from the search on your desktop taskbar - Open ‘Terminal’ in VSCode (‘View’ -&gt; ‘Terminal’)\nIn either one, type in the following: git config –global user.name “githubusername” &lt;- Enter your own GitHub username in the quotations, then hit enter git config –global user.email “email@nhs.net” &lt;- Enter your own email address associated with your GitHub account in the quotations, then hit enter\nThat’s it :star:\n\n\nInitialising a repository\nCreate the repo before you start coding Create the repo before you start coding Create the repo before you start coding\nThe best thing to do is to create the repo before (or as soon to the beginning as possible) starting writing your actual code. Think of it as this: you wouldn’t work on a big excel file without saving first, in case you lost it. The same applies here.\nThe way that Git works, you work on files saved in a local folder, then push to GitHub when you’re done (so you’re never working directly in GitHub). So, to start, you need to create a local blank folder for you to start with (or where you existing folder is). Recommendation is to create a ‘GitHub’ folder in your OneDrive, where the repo folders can sit.\nTo intisialise a repo, click the Source Control button on the left panel:\n\nClick ‘Open Folder’ and navigate to the repo folder (in your ‘OneDrive’ folder). Note: you may be asked whether you trust the authors of the files in the folder. Usually this is yes, as it’s from your own OneDrive.\nNow we’ve selected the folder, we can now initialise the repository:\n\nThis won’t yet appear on the GitHub web browser (as we haven’t published yet) - we will get to that.\n\n\nCloning a repository\nIf, instead of creating your own repo from scratch, you want to take something someone else has done for yourself, you can clone the repo. To do this, click ‘Clone Repository’ instead:\n\n(Note: if you’re already working on a repo, you can clear what you’re working on by opening a new window (File -&gt; New window) or by closing the current folder (File -&gt; Close folder)).\nIn the top bar, click ‘Clone from GitHub’ and start typing for the repo you want.\n\nSave to your ‘OneDrive’ folder. You can now work on the files.\n\n\nBranching\nNow, the whole point of GitHub is to work collaboratively, so there will be times where you want to clone someone’s repo and make your own additions. This is also best practice for your own repos: when adding a new development, create a new branch. Never work in ‘main’.\nThis is where branches come in.\nOnce you’ve cloned a repo, ensure you are in your Source Control view and click the ‘…’ as shown below.\n\nAnd enter the desired branch name (e.g. ‘dev’)\n\nSwitching branches: you can switch branches within VSCode in the bottom left of the screen:\n\nIn your branch, you can work on you script, add and delete files etc. If you want, it can be merged to the ‘main’ branch, which we will again get to…\n\n\nTracking and staging\nOnce you’ve done the above, you can now make changes to the repository. This could be: - Changing an existing file (e.g. adding new lines of code) - Adding new files (including codefiles) into the repo - Removing files from the repo (be careful of dependencies!)\nThis is where the real power of GitHub comes in - tracking changes without losing what you’ve already done.\nFirst, another best practice to remember: COMMIT OFTEN, PERFECT LATER, PUBLISH ONCE\nIf you commit smaller changes it’s far easier to go back if you’ve made a mistake and saves more work down the line. Again, think of it as saving an excel workbook.\nThe how to bit: Once you’ve changed something, navigate to the Source Control tab again. You’ll see a ‘changes’ section in the source control, as below.\n\n\nCommit\nIncluding a bit on the Git Log\n\n\nGit restore\n\n\nMerge\n\n\nMerge conflicts\n\n\nGit Log\n\n\ndiff\n\n\nRoll back\n\n\nGit revert\n\n\nPublishing an existing repo\n\n\nPush and pull\n\n\nForking and cloning\n\n\nPull requests\n\n\nIssues",
    "crumbs": [
      "GitHub Guides",
      "GitHub in VS Code"
    ]
  },
  {
    "objectID": "3a-r-studio.html",
    "href": "3a-r-studio.html",
    "title": "GitHub in RStudio",
    "section": "",
    "text": "There are three ways to create version control for a RStudio project.\na) Create a new project and create a local Git repository: Select File &gt; New Project.., create a project from a New Directory and check the option Create a git repository. In order to push to a remote repository later on you add that remote repository by using the Git shell. If you already know which online repository you want to use for your projects, option c) is more convenient.\nb) Create a new project from a folder under version control: In this case you only need to create a new RStudio project for that directory and version control is automatically enabled. Go to File &gt; New Project, select create a new project from an Existing Directory and create the project.\nc) Create a new project based on a remote Git repository: Select File &gt; New Project.. and from the opening menu select to create a new project from Version Control, Choose Git, then provide the repository url (use the https link of the url if you want to avoid all the ssh trouble) from the the repository you want to clone and create the project.\nIn this tutorial we create a project based on a remote GitHub repository (option c). Hence we first create a new repository on GitHub and create our GitHub project from that repository.\n1. Create a new GitHub repository: Login to your GitHub account and create a new GitHub repository. Give your new repository a short and memorable name e.g. rstudio-git-test, check the option to initialize this repository with a README and create the repository.\n2. Copy the repository HTTPS url: To create a new Git based project in RStudio, we need the repository url. You find the repository HTTPS url on the just created GitHub project page. There press the button &lt;&gt; Code (green button) and copy the HTTPS link of the project by clicking the little icon to the right of the URL. The link will be something like https://github.com/yourusername/rstudio-git-test.git.\n3. Create a new RStudio project with Git version control: Now everything is ready to create a new project with Git version control in RStudio. In RStudio Select File &gt; New Project.., select Version Control, Choose Git, then provide the repository HTTPS link, select the R workspace folder and create the project. RStudio now copies (clone in Git terms) the content of the repository to your project folder. The content of the GitHub repository should now appear in the Files pane of RStudio and you should see there the created README.md.\n\n\n\n\n1. Make local changes: Open the README.md file and edit and save the file.\n# RR project in RStudio\n\nRR workshop RStudio + Git repository\n\nMy first commit to GitHub with R \n2. Commit the changes: Now we commit the local changes to the local Git repository.\nIn RStudio press the Git icon and select Commit from Git menu (Ctrl+Alt+M) to open the commit window to review the changes in the repository. In the Staged column we select by checking the checkbox the files we want to commit. The lower pane shows the edits in green and red of the file. Enter a commit message to indicate what has changed in this commit e.g.Readme update and press the Commit button.\n\n3. Push to the remote repository: To push the changes to the remote GitHub repository press the Push button on the upper right corner of the commit window. You will be prompted to enter the username and password of your GitHub account. Enter them and check on the GitHub page if the changes got pushed to your online repository on GitHub.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in RStudio"
    ]
  },
  {
    "objectID": "3a-r-studio.html#part-1-create-a-new-rstudio-project-with-git",
    "href": "3a-r-studio.html#part-1-create-a-new-rstudio-project-with-git",
    "title": "GitHub in RStudio",
    "section": "",
    "text": "There are three ways to create version control for a RStudio project.\na) Create a new project and create a local Git repository: Select File &gt; New Project.., create a project from a New Directory and check the option Create a git repository. In order to push to a remote repository later on you add that remote repository by using the Git shell. If you already know which online repository you want to use for your projects, option c) is more convenient.\nb) Create a new project from a folder under version control: In this case you only need to create a new RStudio project for that directory and version control is automatically enabled. Go to File &gt; New Project, select create a new project from an Existing Directory and create the project.\nc) Create a new project based on a remote Git repository: Select File &gt; New Project.. and from the opening menu select to create a new project from Version Control, Choose Git, then provide the repository url (use the https link of the url if you want to avoid all the ssh trouble) from the the repository you want to clone and create the project.\nIn this tutorial we create a project based on a remote GitHub repository (option c). Hence we first create a new repository on GitHub and create our GitHub project from that repository.\n1. Create a new GitHub repository: Login to your GitHub account and create a new GitHub repository. Give your new repository a short and memorable name e.g. rstudio-git-test, check the option to initialize this repository with a README and create the repository.\n2. Copy the repository HTTPS url: To create a new Git based project in RStudio, we need the repository url. You find the repository HTTPS url on the just created GitHub project page. There press the button &lt;&gt; Code (green button) and copy the HTTPS link of the project by clicking the little icon to the right of the URL. The link will be something like https://github.com/yourusername/rstudio-git-test.git.\n3. Create a new RStudio project with Git version control: Now everything is ready to create a new project with Git version control in RStudio. In RStudio Select File &gt; New Project.., select Version Control, Choose Git, then provide the repository HTTPS link, select the R workspace folder and create the project. RStudio now copies (clone in Git terms) the content of the repository to your project folder. The content of the GitHub repository should now appear in the Files pane of RStudio and you should see there the created README.md.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in RStudio"
    ]
  },
  {
    "objectID": "3a-r-studio.html#part-2-make-local-changes-commit-and-push-to-github",
    "href": "3a-r-studio.html#part-2-make-local-changes-commit-and-push-to-github",
    "title": "GitHub in RStudio",
    "section": "",
    "text": "1. Make local changes: Open the README.md file and edit and save the file.\n# RR project in RStudio\n\nRR workshop RStudio + Git repository\n\nMy first commit to GitHub with R \n2. Commit the changes: Now we commit the local changes to the local Git repository.\nIn RStudio press the Git icon and select Commit from Git menu (Ctrl+Alt+M) to open the commit window to review the changes in the repository. In the Staged column we select by checking the checkbox the files we want to commit. The lower pane shows the edits in green and red of the file. Enter a commit message to indicate what has changed in this commit e.g.Readme update and press the Commit button.\n\n3. Push to the remote repository: To push the changes to the remote GitHub repository press the Push button on the upper right corner of the commit window. You will be prompted to enter the username and password of your GitHub account. Enter them and check on the GitHub page if the changes got pushed to your online repository on GitHub.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in RStudio"
    ]
  },
  {
    "objectID": "4-databricks-github.html#aims",
    "href": "4-databricks-github.html#aims",
    "title": "GitHub in Databricks",
    "section": "",
    "text": "Many of the principles of working in a reproducible way and using GitHub also apply when we use GitHub in UDAL and Databricks. We will go through the practicalities of connecting to and using your GitHub account in Databricks.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#create-a-personal-access-token",
    "href": "4-databricks-github.html#create-a-personal-access-token",
    "title": "GitHub in Databricks",
    "section": "Create a Personal Access Token",
    "text": "Create a Personal Access Token\nFirst, we need to create a personal access token for our GitHub account.\n\nIn GitHub\nGo to your GitHub account…\n\nClick on your profile photo and go to settings.\n\n\n\nScroll down to Developer Settings. For me this was the bottom option in the left pane so keep scrolling!\n\n\n\nClick the Personal Access Tokens tab on the left and then Tokens (Classic).\n\n\n\nClick Generate New Token, choose the (Classic) option if offered that choice.\n\n\n\nEnter a name for your token. Help yourself out here and give it a sensible name… Give the token all the repo scope and, if you use GitHub actions, also select the workflow scope.\n\n\n\n\n\n\n\nTip\n\n\n\nNote: although you can set your token to have no expiry date, for security purposes, it is recommended that you give your token an expiry date.\n\n\n\n\nClick Generate Token.\n\n\nAn access token should appear (and you will also get an email to notify you that it has been created).\n\n\n\n\n\n\nImportant\n\n\n\nNote: Once you navigate away from this page, the token will disappear and never come back again, so make sure you copy it to the clipboard.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#in-databricks",
    "href": "4-databricks-github.html#in-databricks",
    "title": "GitHub in Databricks",
    "section": "In Databricks",
    "text": "In Databricks\nWithin Databricks (once you’ve logged into UDAL and authenticated yourself as many times as it has deemed necessary today):\n\nConnecting with your token\n\nClick on your profile in the top right and then Settings.\n\n\n\nThen click Linked Accounts.\n\n\n\nPopulate the form with GitHub as the Git Provider and your own user name. This is where you can paste your Personal Access Token.\n\n\n\n\n\n\n\n\nTip\n\n\n\nRemember: you can’t copy and paste from outside UDAL…",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#working-with-repos",
    "href": "4-databricks-github.html#working-with-repos",
    "title": "GitHub in Databricks",
    "section": "Working with repos",
    "text": "Working with repos\n\nCreating a repo reminder\n\nIf you do not already have a repo you want to clone, you can create one on GitHub. Feel free to use the SE github template which will initialise a repo with a gitignore, SOP folder and template, and README template with some key reporting info for you to easily edit.\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember to create your repo in the nhsengland area, not your personal GitHub, otherwise when you transfer it you will lose your admin privileges! You should also add the South East D&A Team and the everyone team to the permissions.\n\n\n\nNow that you have a repo to clone…\n\n\nCloning a repo\n\nIn your Home (personal) area of Databricks, click Create and then Git Folder.\n\n\nor go via the big New button in the top left.\n\n\nCopy the repo URL into this box and give your folder a name.\n\n\nYou can get the repo URL from GitHub. Navigate to the repo and click the big &lt;&gt;Code button.\n\nWhen you’ve done, it should look something like this:\n\nYou are now ✨Connected✨",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "4-databricks-github.html#maintaining-your-repo",
    "href": "4-databricks-github.html#maintaining-your-repo",
    "title": "GitHub in Databricks",
    "section": "Maintaining your repo",
    "text": "Maintaining your repo\n\nThe Git Window\nClick on the branch name to open the Git window.\n\nFrom here you can manage branches, commits, and everything else that you might want to do. You can also open the repo in GitHub from this pane.\n\n\n\nPull changes to the repository\nMake sure you get the latest version of the repo before you begin using it. Within the Git window, click Pull in the top right corner. Confirm that you’re happy to pull changes.\n\n\n\n\nCreate a branch\nCreating a branch is as simple as selecting Create Branch in the Git window and giving it a name. You can now work from this new branch.\n\nYou can see which branch you are working from in the repository.\n\n\n\n\n\n\n\nTip\n\n\n\nRemember to only make changes outside of the main branch. Only fully complete and QA’d code should be on the main branch.\n\n\n\n\nPush changes\nOnce you’ve made any changes, open up the Git window. Any files which have been changed will appear on the left with the changes on the right. Select which changes to commit and add any commit messages before hitting Commit & Push. Notice that the Databricks integration pushes commits automatically.\n\n\n\n\n\n\n\nTip\n\n\n\nRemember that you can roll back commits, so feel free to stage your commits (make multiple smaller commits) to make it easier to roll back only what you need to.\n\n\nPull requests can be handled and old branches deleted in the normal way on GitHub.\n\n\n\n\n\n\nTip\n\n\n\nYou can assign your QA’er to the pull request to perform the QA and make the final merge.\n\n\n\n\nThe gitignore\nAny files that you want to ignore can be added to the gitignore using the relative file path.",
    "crumbs": [
      "GitHub Guides",
      "GitHub in Databricks"
    ]
  },
  {
    "objectID": "5-fdp.html",
    "href": "5-fdp.html",
    "title": "GitHub in FDP",
    "section": "",
    "text": "Under development!",
    "crumbs": [
      "GitHub Guides",
      "GitHub in FDP"
    ]
  },
  {
    "objectID": "0-intro-to-github.html",
    "href": "0-intro-to-github.html",
    "title": "An Introduction to GitHub",
    "section": "",
    "text": "Git is a version control system. It allows you to track different versions of your files and control source code.\nGitHub is an online repository which hosts open source projects. It is not the same as Git\nThere are other alternatives to GitHub, for example GitLab or DevOps, which is part of Azure and is integrated in UDAL.",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "0-intro-to-github.html#what-is-a-repository",
    "href": "0-intro-to-github.html#what-is-a-repository",
    "title": "An Introduction to GitHub",
    "section": "What is a repository?",
    "text": "What is a repository?\n\nA repository is a place that contains all your code and files associated with a piece of work.\nGenerally, you would have a separate repository for each of your projects.\nSee here for a guide on how to create a repository in the SE D&A area.",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "0-intro-to-github.html#cloning",
    "href": "0-intro-to-github.html#cloning",
    "title": "An Introduction to GitHub",
    "section": "Cloning",
    "text": "Cloning\n\nWhat is cloning?\n\nCloning a Git repository means creating a local copy of a remote repository on your computer.\nOnce you have cloned a repository, you can start working on the project, making and saving changes, and committing them to your local repository, without changing the remote version.\n\n\n\nWhy clone?\n\nContribute to group projects - where multiple people work on the same code base, cloning enables individuals to edit and save the code without impacting on other users.\nMake use of other open source repositories - you can use and edit code from other people’s code, even if you don’t know them.",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "0-intro-to-github.html#branching",
    "href": "0-intro-to-github.html#branching",
    "title": "An Introduction to GitHub",
    "section": "Branching",
    "text": "Branching\n\nWhat is branching and why do we use it?\nA branch is a separate version of the main repository. Branching allows you to work on a different part of a project without impacting the main repository. When any development or work is complete, a branch can be merged with the main repository.\n\n\n\n\n\n\n\nNote\n\n\n\nYou can read more about the lego analogy here (https://opensource.com/article/22/4/git-branches/).",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "0-intro-to-github.html#fetching",
    "href": "0-intro-to-github.html#fetching",
    "title": "An Introduction to GitHub",
    "section": "Fetching",
    "text": "Fetching\n\n\n\n\n\nGiven that one of the strengths of using Git and GitHub is that we can all work collaboratively, it is important to make sure that the version we are using is up to date with any changes that have been made to the repository. This is what fetching does.\n\nFetch lets us review what changes have been made in the remote repository before we add them to our local version.\nThe alternative option is called pulling. The difference here is that this automatically makes changes from the remote repository to the local version.\nFetch is the safer option as it lets us see what any changes are before we adopt them.",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "0-intro-to-github.html#staging-committing-and-pushing",
    "href": "0-intro-to-github.html#staging-committing-and-pushing",
    "title": "An Introduction to GitHub",
    "section": "Staging, Committing, and Pushing",
    "text": "Staging, Committing, and Pushing\nOnce you have made a change to a script you can stage it, the next step is to commit it, and finally you can push it to the remote repository.\n\n\n\n\n\n\nImportant\n\n\n\nBefore any of these steps, you should check that you haven’t included anything sensitive that shouldn’t be shared e.g. data.\n\n\nStaging allows you to group any changes to different, but related, files so that they are in the same commit.\nYou may choose not to push your committed changes immediately e.g. if you are still in the process of making changes, but it allows you to separate your changes into stages and keep a record of those. Commits are the units of undo i.e. you can roll back the changes by commit, so it’s worth thinking about what you include in each commit (and don’t make them too large).",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "0-intro-to-github.html#pull-requests",
    "href": "0-intro-to-github.html#pull-requests",
    "title": "An Introduction to GitHub",
    "section": "Pull requests",
    "text": "Pull requests\nA pull request is how you make a request to merge your branch to another branch e.g. move your changes to the main branch. If there are things that disagree between the branches that you are trying to merge, this is called a conflict. You have to resolve these before you can merge. If there are no conflicts, your pull request can be actioned immediately and the branches will be merged.",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "1b-github-desktop.html",
    "href": "1b-github-desktop.html",
    "title": "Using GitHub Desktop",
    "section": "",
    "text": "For those that want do more version control and collaboration, GitHub desktop is a good place to start.\n\n\nFirst step is to download GitHub Desktop from the company portal. If you open the company portal, you can search for GitHub. You want to download the app with the purple cat.\n\nYou will then need to open it up and you should be prompted to pop in your github username (you may need to validate this in the browser version- I can’t remember).\nIf you ever need to change your associated github account, you can navigate File &gt; Options, and switch account in there.\n\n\n\n\n\n\nEven though it looks a little different, a lot of the process to create a repo in GitHub Desktop is similar to that of creating a repo in the browser, see here for a reminder. The main difference is that your repo will live locally until you choose to publish to GitHub, so no need to choose where it lives or privacy settings. You will, however need to choose which local file to put the repo folder- this will be where you save all your code.\n\n\n\n\n\n\nSetting up a gitignore file is a bit more important when working from GitHub desktop than when simply uploading files to the browser version. By default, all the files in the repo folder will be included in the repo. However, there are likely to be some files or information that you don’t want to share. For example, this could be data or sensitive connection strings. The gitignore file tells the repo which files not to look at.\n\n\n\nThis file can be set up when you create the repo by selecting a specific gitignore template. This will ignore a determined list of filetypes which are commonly associated with the option you select. For example, if you select the R gitignore template, the file will include all R History, R Data, R User Data, etc. It can be a good starting point if you don’t know where to start.\n\n\n\nFiles can be added to the gitignore manually by right clicking on a file in the Changes section of GitHub desktop, and clicking Ignore file. You can choose whether to add the individual file or all files of the same filetype (this might be useful if you want to blanket ignore e.g. .csv files)\n\n\n\nYou can change your gitignore file as you go along by opening it as a text file, making your changes, and saving them. You can then commit changes to your gitignore file in the same way as you commit changes to any other file in the repo so that they are tracked.\nAlternatively, you can update the gitignore by navigating to Repository &gt; Repository settings &gt; Ignored files and make changes there.\n\n\n\n\nIndividual files: you can ignore individual files by typing the filename\nWhole filetypes: if you want to ignore all of a particular filetype just prefix the filetype with an asterisk e.g. *.xlsx\nFolders and subfolders: if you don’t want a whole folder included, you can just name the folder path e.g. /data\n\n\n\n\n\nUntil you click Publish repository, everything you create will live locally. This means that you can make changes to your files and code and play about endlessly until you’re happy to share more widely. It’s still a good idea to manage and commit changes.\nYou should now be able to create your projects and files within the repo folder (which lives wherever you decided when you set up the repo). You are then free to code / change files as you would normally within whichever programmes you use. All your saved changes will be tracked.\nAny changes you save in any files in this folder (that aren’t ignored) will appear in the GitHub desktop changes section. You can see which file has changed, what has been removed (red), and what has been added (green). If you like the changes, ensure that the tick box is checked on the left of the file name, name your commit and add a description (optional), and click Commit to main.\n\n\n\n\n\n\nTip\n\n\n\nA green square on the right of the file indicates a completely new file, orange indicates changes to an existing file, red indicates a deleted file.\n\n\n\nYou can make changes to multiple files in a single commit or commit them separately if you are likely to want to revisit multiple changes separately\n\n\n\nIf you need to review or revisit any prior commits, you can see these in the History tab.\n\n\n\n\n\nAll that’s left to do is share your repo to github. This is as easy as clicking the Publish repository button.\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember to select the organisation if you want to share with colleagues. If you publish to your private area, you can transfer to the organisation but you will lose admin rights so won’t be able to make changes or move to the South East area!\n\n\nYou can also pull any changes from github down to your local machine by clicking Pull origin in the top bar\n\n\n\nAs well as creating your own repos, it may be that you want to open someone else’s that you’ve seen on GitHub. There are 2 easy ways to do this:\n\nFrom the browser\nFrom the desktop app\n\n\n\nThis is really easy. Navigate to the repo you want to work on. Click the green &lt;&gt; Code button, and then Open with GitHub Desktop. Easy.\n\n\n\n\nThis is almost as easy. Within GitHub desktop, navigate to File &gt; Clone Repository and paste in either the URL of the repo in question, or type in the github username and repo name. The only other thing you need to do is tell GitHub desktop where you want the repo folder to live on your machine.",
    "crumbs": [
      "GitHub Guides",
      "Using GitHub Desktop"
    ]
  },
  {
    "objectID": "1b-github-desktop.html#setup",
    "href": "1b-github-desktop.html#setup",
    "title": "Using GitHub Desktop",
    "section": "",
    "text": "First step is to download GitHub Desktop from the company portal. If you open the company portal, you can search for GitHub. You want to download the app with the purple cat.\n\nYou will then need to open it up and you should be prompted to pop in your github username (you may need to validate this in the browser version- I can’t remember).\nIf you ever need to change your associated github account, you can navigate File &gt; Options, and switch account in there.",
    "crumbs": [
      "GitHub Guides",
      "Using GitHub Desktop"
    ]
  },
  {
    "objectID": "1b-github-desktop.html#local-repo-management",
    "href": "1b-github-desktop.html#local-repo-management",
    "title": "Using GitHub Desktop",
    "section": "",
    "text": "Even though it looks a little different, a lot of the process to create a repo in GitHub Desktop is similar to that of creating a repo in the browser, see here for a reminder. The main difference is that your repo will live locally until you choose to publish to GitHub, so no need to choose where it lives or privacy settings. You will, however need to choose which local file to put the repo folder- this will be where you save all your code.\n\n\n\n\n\n\nSetting up a gitignore file is a bit more important when working from GitHub desktop than when simply uploading files to the browser version. By default, all the files in the repo folder will be included in the repo. However, there are likely to be some files or information that you don’t want to share. For example, this could be data or sensitive connection strings. The gitignore file tells the repo which files not to look at.\n\n\n\nThis file can be set up when you create the repo by selecting a specific gitignore template. This will ignore a determined list of filetypes which are commonly associated with the option you select. For example, if you select the R gitignore template, the file will include all R History, R Data, R User Data, etc. It can be a good starting point if you don’t know where to start.\n\n\n\nFiles can be added to the gitignore manually by right clicking on a file in the Changes section of GitHub desktop, and clicking Ignore file. You can choose whether to add the individual file or all files of the same filetype (this might be useful if you want to blanket ignore e.g. .csv files)\n\n\n\nYou can change your gitignore file as you go along by opening it as a text file, making your changes, and saving them. You can then commit changes to your gitignore file in the same way as you commit changes to any other file in the repo so that they are tracked.\nAlternatively, you can update the gitignore by navigating to Repository &gt; Repository settings &gt; Ignored files and make changes there.\n\n\n\n\nIndividual files: you can ignore individual files by typing the filename\nWhole filetypes: if you want to ignore all of a particular filetype just prefix the filetype with an asterisk e.g. *.xlsx\nFolders and subfolders: if you don’t want a whole folder included, you can just name the folder path e.g. /data\n\n\n\n\n\nUntil you click Publish repository, everything you create will live locally. This means that you can make changes to your files and code and play about endlessly until you’re happy to share more widely. It’s still a good idea to manage and commit changes.\nYou should now be able to create your projects and files within the repo folder (which lives wherever you decided when you set up the repo). You are then free to code / change files as you would normally within whichever programmes you use. All your saved changes will be tracked.\nAny changes you save in any files in this folder (that aren’t ignored) will appear in the GitHub desktop changes section. You can see which file has changed, what has been removed (red), and what has been added (green). If you like the changes, ensure that the tick box is checked on the left of the file name, name your commit and add a description (optional), and click Commit to main.\n\n\n\n\n\n\nTip\n\n\n\nA green square on the right of the file indicates a completely new file, orange indicates changes to an existing file, red indicates a deleted file.\n\n\n\nYou can make changes to multiple files in a single commit or commit them separately if you are likely to want to revisit multiple changes separately\n\n\n\nIf you need to review or revisit any prior commits, you can see these in the History tab.",
    "crumbs": [
      "GitHub Guides",
      "Using GitHub Desktop"
    ]
  },
  {
    "objectID": "1b-github-desktop.html#push-to-github",
    "href": "1b-github-desktop.html#push-to-github",
    "title": "Using GitHub Desktop",
    "section": "",
    "text": "All that’s left to do is share your repo to github. This is as easy as clicking the Publish repository button.\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember to select the organisation if you want to share with colleagues. If you publish to your private area, you can transfer to the organisation but you will lose admin rights so won’t be able to make changes or move to the South East area!\n\n\nYou can also pull any changes from github down to your local machine by clicking Pull origin in the top bar",
    "crumbs": [
      "GitHub Guides",
      "Using GitHub Desktop"
    ]
  },
  {
    "objectID": "1b-github-desktop.html#open-a-github-repo",
    "href": "1b-github-desktop.html#open-a-github-repo",
    "title": "Using GitHub Desktop",
    "section": "",
    "text": "As well as creating your own repos, it may be that you want to open someone else’s that you’ve seen on GitHub. There are 2 easy ways to do this:\n\nFrom the browser\nFrom the desktop app\n\n\n\nThis is really easy. Navigate to the repo you want to work on. Click the green &lt;&gt; Code button, and then Open with GitHub Desktop. Easy.\n\n\n\n\nThis is almost as easy. Within GitHub desktop, navigate to File &gt; Clone Repository and paste in either the URL of the repo in question, or type in the github username and repo name. The only other thing you need to do is tell GitHub desktop where you want the repo folder to live on your machine.",
    "crumbs": [
      "GitHub Guides",
      "Using GitHub Desktop"
    ]
  },
  {
    "objectID": "0-intro-to-github.html#what-is-git-what-is-github-and-are-they-the-same-thing",
    "href": "0-intro-to-github.html#what-is-git-what-is-github-and-are-they-the-same-thing",
    "title": "An Introduction to GitHub",
    "section": "",
    "text": "Git is a version control system. It allows you to track different versions of your files and control source code.\nGitHub is an online repository which hosts open source projects. It is not the same as Git\nThere are other alternatives to GitHub, for example GitLab or DevOps, which is part of Azure and is integrated in UDAL.",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "0-intro-to-github.html#key-concepts",
    "href": "0-intro-to-github.html#key-concepts",
    "title": "An Introduction to GitHub",
    "section": "Key Concepts",
    "text": "Key Concepts\n\nWhat is a repository?\n\nA repository is a place that contains all your code and files associated with a piece of work.\nGenerally, you would have a separate repository for each of your projects.\nSee here for a guide on how to create a repository in the SE D&A area.\n\n\n\nCloning\n\nWhat is cloning?\n\nCloning a Git repository means creating a local copy of a remote repository on your computer.\nOnce you have cloned a repository, you can start working on the project, making and saving changes, and committing them to your local repository, without changing the remote version.\n\n\n\nWhy clone?\n\nContribute to group projects - where multiple people work on the same code base, cloning enables individuals to edit and save the code without impacting on other users.\nMake use of other open source repositories - you can use and edit code from other people’s code, even if you don’t know them.\n\n\n\n\nBranching\n\nWhat is branching and why do we use it?\nA branch is a separate version of the main repository. Branching allows you to work on a different part of a project without impacting the main repository. When any development or work is complete, a branch can be merged with the main repository.\n\n\n\n\n\n\n\nNote\n\n\n\nYou can read more about the lego analogy here (https://opensource.com/article/22/4/git-branches/).\n\n\n\n\n\nFetching\n\n\n\n\n\nGiven that one of the strengths of using Git and GitHub is that we can all work collaboratively, it is important to make sure that the version we are using is up to date with any changes that have been made to the repository. This is what fetching does.\n\nFetch lets us review what changes have been made in the remote repository before we add them to our local version.\nThe alternative option is called pulling. The difference here is that this automatically makes changes from the remote repository to the local version.\nFetch is the safer option as it lets us see what any changes are before we adopt them.\n\n\n\n\nStaging, Committing, and Pushing\nOnce you have made a change to a script you can stage it, the next step is to commit it, and finally you can push it to the remote repository.\n\n\n\n\n\n\nImportant\n\n\n\nBefore any of these steps, you should check that you haven’t included anything sensitive that shouldn’t be shared e.g. data.\n\n\nStaging allows you to group any changes to different, but related, files so that they are in the same commit.\nYou may choose not to push your committed changes immediately e.g. if you are still in the process of making changes, but it allows you to separate your changes into stages and keep a record of those. Commits are the units of undo i.e. you can roll back the changes by commit, so it’s worth thinking about what you include in each commit (and don’t make them too large).\n\n\nPull requests\nA pull request is how you make a request to merge your branch to another branch e.g. move your changes to the main branch. If there are things that disagree between the branches that you are trying to merge, this is called a conflict. You have to resolve these before you can merge. If there are no conflicts, your pull request can be actioned immediately and the branches will be merged.",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "0-intro-to-github.html#the-.gitignore",
    "href": "0-intro-to-github.html#the-.gitignore",
    "title": "An Introduction to GitHub",
    "section": "The .gitignore",
    "text": "The .gitignore\nSometimes our projects contain information or data that is sensitive and we do not want to publish or track this information. A .gitignore is a file that contains all of the files and folders from the project that you do not want Git to log and track.\nYou have some options for specifying files in the gitignore. Common ones are below:\n\nYou can explicitly reference a file path within the project structure e.g.to ignore a file called data_load in a folder called helper:\n\n\nhelper/data_load.R\n\n\nYou can ignore all files of a certain extension e.g. to ignore all .xlsx files:\n\n\n*.xlsx\n\n\nYou can add whole folders to the gitignore e.g. to ignore the folder called output:\n\n\noutput/\n\n\nYou can exclude files from the gitignore e.g. you want to ignore all .pptx files except the one called final.pptx:\n\n\n*.pptx !final.pptx\n\n\n\n\n\n\n\nTip\n\n\n\nIn GitHub desktop you can add files to the gitignore by right clicking on the file and clicking Ignore file. Or add all files of that type by right clicking and choosing e.g. Ignore all .xlsx files. In VSCode, ignored files are greyed out in the file explorer.\n\n\nYour repository should always have a gitignore file in the root folder. When you initialise a repo you can choose to use a gitignore tailored to particular programming languages but the South East template repo has a gitignore that should be a good place to start.\n\n\n\n\n\n\nTip\n\n\n\nIf you are looking to create a .gitignore that covers a wide range of software, websites such as (https://www.toptal.com/developers/gitignore?) can be worth playing with",
    "crumbs": [
      "An Introduction to GitHub"
    ]
  },
  {
    "objectID": "6-qasar.html",
    "href": "6-qasar.html",
    "title": "Branches and Issues for QA",
    "section": "",
    "text": "Note\n\n\n\nThis process can be managed in GitHub desktop, VS Code, or wherever you are most comfortable.",
    "crumbs": [
      "Principles",
      "Branches and Issues for QA"
    ]
  },
  {
    "objectID": "6-qasar.html#remember-the-principles-of-branching",
    "href": "6-qasar.html#remember-the-principles-of-branching",
    "title": "Branches and Issues for QA",
    "section": "Remember the principles of branching",
    "text": "Remember the principles of branching\nFirst let’s remind ourselves of the principles of branching (see here for an intro to branching):\n\nAll code in the main branch should be fully QA’d and functional - even if this means that the repo is almost empty initially.\nNew developments and changes should be coded in their own branch: one branch per ‘feature’. Give the branch a name that helps you identify what a change relates to.\nIf working on larger changes, it may be best to break it down into smaller steps and develop and QA iteratively - you can branch off your branch to help with this.\nGitHub will provide an audit trail of changes made, when they were made, and who made them. This aligns nicely with the team’s QASAR process. It is also easy to roll back to an earlier version if needed.\n\n\n\n\n\n\n\nNote\n\n\n\nRemember that we don’t have enterprise licences so we can’t protect our main branches. Changes can be merged without review so be careful.",
    "crumbs": [
      "Principles",
      "Branches and Issues for QA"
    ]
  },
  {
    "objectID": "6-qasar.html#within-the-regular-qa-process",
    "href": "6-qasar.html#within-the-regular-qa-process",
    "title": "Branches and Issues for QA",
    "section": "within the regular QA process",
    "text": "within the regular QA process\n\nCheck\nThere are a couple of checks to do before QA kicks off properly.\nThe author:\n\nCheck that your code is intentionally commented.\nThe changes you have made are complete, self-reviewed, and saved.\nYou may want to include the author and latest modification date at the top (although GitHub will help manage this for you).\nEnsure that your repo is up to date on GitHub so that the person QA-ing has the most recent version.\nMake sure that the reviewer is a collaborator in the repo settings.\n\nThe QA’er:\n\nMake sure that you have the time and knowledge to do the review.\n\n\n\nRequest QA - the author\nGiven that all your changes are in a new feature branch, the QA process boils down to pull requests.\n\nCreate a pull request with your changes\nAdd a description of what needs to be QA’d, why changes have been made, and any specific QA requests\nAssign a reviewer and click create pull request\n\n\n\nComplete QA - the reviewer\nOnce you’ve been added as a reviewer, you will receive an email with a link, and a GitHub notification where you can view changes.\n\nAdditions will be in green and removals in red. Review all changes and files, adding comments and requesting changes where necessary.\n\nComments can be added in-line with code\n\nOnce you are happy with the changes and all issues are resolved, you can approve the pull request.\n\n\n\nMerge and tidy - the author\nAt this stage, the author can merge the branch. You might want to include in the description (and hence the commit history), the QASAR level requested.\n\n\n\n\n\n\nNote\n\n\n\nAll other information about who QA’d and when will be logged automatically in the pull request.\n\n\nOnce the pull request is merged the author can delete the old branch (or the repo can be set up to automatically delete the old branch). You will still be able to see all the historic commits but it is best to tidy up branches so that only the active ones exist. If you need to change anything, you can simply create a new branch!"
  },
  {
    "objectID": "6-qasar.html#what-to-do-if-you-spot-an-issue-or-have-an-idea",
    "href": "6-qasar.html#what-to-do-if-you-spot-an-issue-or-have-an-idea",
    "title": "Branches and Issues for QA",
    "section": "2. What to do if you spot an issue or have an idea",
    "text": "2. What to do if you spot an issue or have an idea\nIf you are not within the designated QA process, it is still possible that, in using the code, you see a bug or you have a suggestion for a development. You can do that by creating issues. Any user with read access to a repo can create an issue (assuming that issues are enabled for the repo).\n\n\nThe process\n\n[You, the idea-haver or bug-spotter] Create an issue detailing the problem or idea (help here: https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/creating-an-issue).\n[You] If the error or bug is solvable and you feel inclined, you have the option to create a branch that addresses the issue. You can link the pull request with the issue (https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).\n[The author] The person managing the code can add the issue number to any relevant ticket on the task board.\n[The author] The error, bug, or development can be prioritised and actions. Their pull request can also be linked with the issue (https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).\nIssues linked with a pull request will close automatically when they are merged. If not, they can be closed by users with triage permission or greater (https://docs.github.com/en/issues/tracking-your-work-with-issues/administering-issues/closing-an-issue).",
    "crumbs": [
      "Principles",
      "Branches and Issues for QA"
    ]
  },
  {
    "objectID": "6-qasar.html#summary-of-the-process",
    "href": "6-qasar.html#summary-of-the-process",
    "title": "Branches and Issues for QA",
    "section": "Summary of the process",
    "text": "Summary of the process",
    "crumbs": [
      "Principles",
      "Branches and Issues for QA"
    ]
  },
  {
    "objectID": "6-qasar.html#planned-qa-process",
    "href": "6-qasar.html#planned-qa-process",
    "title": "Branches and Issues for QA",
    "section": "1. Planned QA Process",
    "text": "1. Planned QA Process\n\nCheck\nThere are a couple of checks to do before QA kicks off properly.\nIf you are the author:\n\nCheck that your code is intentionally commented.\nThe changes you have made are complete, self-reviewed, and saved.\nYou may want to include the author and latest modification date at the top (although GitHub will help manage this for you).\nEnsure that your repo is up to date on GitHub so that the person QA-ing has the most recent version.\nMake sure that the reviewer is a collaborator in the repo settings.\n\nIf you are the QA’er:\n\nMake sure that you have the time and knowledge to do the review.\n\n\n\nRequest QA - the author\nGiven that all your changes are in a new feature branch, the QA process boils down to pull requests.\n\nCreate a pull request with your changes\nAdd a description of what needs to be QA’d, why changes have been made, and any specific QA requests\nAssign a reviewer and click create pull request\n\n\n\nComplete QA - the reviewer\nOnce you’ve been added as a reviewer, you will receive an email with a link, and a GitHub notification where you can view changes.\n\nAdditions will be in green and removals in red. Review all changes and files, adding comments and requesting changes where necessary.\n\nComments can be added in-line with code\n\nOnce you are happy with the changes and all issues are resolved, you can approve the pull request.\n\n\n\nMerge and tidy - the author\nAt this stage, the author can merge the branch. You might want to include in the description (and hence the commit history), the QASAR level requested.\n\n\n\n\n\n\nNote\n\n\n\nAll other information about who QA’d and when will be logged automatically in the pull request.\n\n\nOnce the pull request is merged the author can delete the old branch (or the repo can be set up to automatically delete the old branch). You will still be able to see all the historic commits but it is best to tidy up branches so that only the active ones exist. If you need to change anything, you can simply create a new branch!",
    "crumbs": [
      "Principles",
      "Branches and Issues for QA"
    ]
  }
]